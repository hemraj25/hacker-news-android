apply plugin: 'jacoco'

jacoco {
    toolVersion = "0.8.12"
}

tasks.withType(Test).configureEach {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
    // see related issue https://github.com/gradle/gradle/issues/5184#issuecomment-457865951
}

ext.excludes = [
        '**/R.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*App.*',
        '**/*Component.*',
        '**/*Module.*',
        '**/*Activity.*',
        '**/*Fragment.*',
        'android/**/*.*',
        'androidx/**/*.*',
        '**/*_Impl*.*',
        '**/*_ViewBinding*.*',
        '**/*Adapter*.*',
        '**/*ViewHolder*.*',
        '**/*Decorator*.*',
        '**/*BottomSheet*.*',
        '**/*Service*.*'
]

project.afterEvaluate {
    if (android.hasProperty("applicationVariants")) {
        android.applicationVariants.all { variant ->
            createVariantCoverage(variant)
        }
    } else if (android.hasProperty("libraryVariants")) {
        android.libraryVariants.all { variant ->
            createVariantCoverage(variant)
        }
    }
}

def createVariantCoverage(variant) {
    def variantName = variant.name
    def variantNameCaps = variant.name.capitalize()

    //./gradlew testDebugUnitTest
    def testTaskName = "test${variantNameCaps}UnitTest"

    //./gradlew testDebugUnitTestCoverageReport
    tasks.register("test${variantNameCaps}UnitTestCoverageReport", JacocoReport) {
        dependsOn "$testTaskName"
        group = "Reporting"
        description = "Generate Jacoco coverage reports on the ${variantNameCaps} build."

        def javaClasses = fileTree(dir: variant.javaCompileProvider.get().destinationDir,
                excludes: project.excludes)
        def kotlinClasses = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${variantName}",
                excludes: project.excludes)
        getClassDirectories().setFrom(files([javaClasses, kotlinClasses]))

        def sourceDirs = [
                "$project.projectDir/src/main/java",
                "$project.projectDir/src/${variantName}/java",
                "$project.projectDir/src/main/kotlin",
                "$project.projectDir/src/${variantName}/kotlin"
        ]
        getSourceDirectories().setFrom(files(sourceDirs))
        getExecutionData().setFrom(files(
                "${project.buildDir}/outputs/unit_test_code_coverage/${variantName}UnitTest/${testTaskName}.exec"))

        reports {
            def rootProjectBuildDir = rootProject.getLayout().buildDirectory.get().asFile
            xml.required = true
            html.required = true

            def task = "test${variantNameCaps}UnitTestCoverageReport"
            logger.quiet("jacoco html report: $rootProjectBuildDir/reports/jacoco/$task/html/index.html")
            logger.quiet("jacoco xml report: $rootProjectBuildDir/reports/jacoco/$task/${task}.xml")
        }
    }
}
